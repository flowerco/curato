"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSharedAlbums = exports.deleteAlbums = exports.postAlbum = void 0;
const schema_1 = require("../models/schema");
const mongodb_1 = require("mongodb");
const postAlbum = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    // should receive userId and album
    console.log(ctx.request.body);
    try {
        const userId = (_a = ctx.request.body) === null || _a === void 0 ? void 0 : _a.userId;
        const album = (_b = ctx.request.body) === null || _b === void 0 ? void 0 : _b.album;
        if (!userId || !album) {
            throw new Error('Missing user input.');
        }
        // console.log("The album received is: ", album);
        // Either create the album on the user or update it if it already exists.
        // Existing albums will have a populated MongoDB ID.
        if (!album.id) {
            // if album id is not available
            const user = yield schema_1.User.findOne({ _id: new mongodb_1.ObjectId(userId.toString()) });
            const newAlbum = new schema_1.Album(album);
            if (!user || Object.keys(user).length === 0)
                throw new Error('No user found');
            user.albums.push(newAlbum);
            // add this to synchronise id and _id (generated by MongoDB)
            // to test if this works
            newAlbum.id = newAlbum._id;
            user.save();
            // return value is not used in frontend ?
            ctx.body = newAlbum._id;
            ctx.status = 201;
        }
        else {
            // if album id is already available 
            const user = yield schema_1.User.findOne({ _id: new mongodb_1.ObjectId(userId.toString()) });
            if (!user || Object.keys(user).length === 0)
                throw new Error('No user found');
            user.albums.forEach((el, index) => {
                if (album.id = el._id) {
                    user.albums[index] = Object.assign(Object.assign({}, album), { _id: album.id });
                }
                console.log("Searching for existing album, found: ", user.albums[index]);
            });
            user.save();
            ctx.body = user.albums;
            ctx.status = 201;
        }
    }
    catch (err) {
        console.log("Error in server postAlbum: ", err);
        ctx.status = 400;
    }
});
exports.postAlbum = postAlbum;
const deleteAlbums = (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    try {
        const userId = (_c = ctx.request.body) === null || _c === void 0 ? void 0 : _c.userId;
        if (!userId)
            throw new Error('missing user details');
        const user = yield schema_1.User.findOne({ _id: new mongodb_1.ObjectId(userId.toString()) });
        if (!user || Object.keys(user).length === 0)
            throw new Error('User not found');
        user.albums = [];
        user.save();
        ctx.status = 204;
        console.log(`User ${userId} albums removed`);
    }
    catch (err) {
        console.log("Error in the server deleteAlbum: ", err);
        ctx.status = 500;
    }
});
exports.deleteAlbums = deleteAlbums;
// not implemented by author
const getSharedAlbums = (ctx) => {
    // logic to get shared albums 
};
exports.getSharedAlbums = getSharedAlbums;
